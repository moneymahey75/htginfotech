/*
  # Fix register_user function for proper database saves

  1. Function Updates
    - Fix the register_user function to properly save all data
    - Add better error handling and logging
    - Ensure all tables are updated correctly
    - Fix parameter handling

  2. Security
    - Maintain RLS policies
    - Ensure proper permissions for registration
*/

-- Drop existing function if it exists
DROP FUNCTION IF EXISTS register_user(uuid, text, text, text, text, text, text, text);

-- Create improved register_user function
CREATE OR REPLACE FUNCTION register_user(
    p_user_id uuid,
    p_email text,
    p_first_name text,
    p_middle_name text DEFAULT '',
    p_last_name text,
    p_username text,
    p_mobile text DEFAULT '',
    p_user_type text DEFAULT 'learner'
)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_sponsorship_number text;
    v_result json;
    v_user_exists boolean := false;
    v_profile_exists boolean := false;
BEGIN
    -- Log function start
    RAISE NOTICE 'Starting register_user for user_id: %, email: %, type: %', p_user_id, p_email, p_user_type;
    
    -- Validate required parameters
    IF p_user_id IS NULL OR p_email IS NULL OR p_first_name IS NULL OR p_last_name IS NULL OR p_username IS NULL THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Missing required parameters',
            'details', 'user_id, email, first_name, last_name, and username are required'
        );
    END IF;

    -- Validate user type
    IF p_user_type NOT IN ('learner', 'tutor', 'job_seeker', 'job_provider', 'admin') THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Invalid user type',
            'details', 'user_type must be one of: learner, tutor, job_seeker, job_provider, admin'
        );
    END IF;

    -- Check if user already exists
    SELECT EXISTS(SELECT 1 FROM tbl_users WHERE tu_id = p_user_id) INTO v_user_exists;
    SELECT EXISTS(SELECT 1 FROM tbl_user_profiles WHERE tup_user_id = p_user_id) INTO v_profile_exists;

    RAISE NOTICE 'User exists: %, Profile exists: %', v_user_exists, v_profile_exists;

    -- Insert or update user record
    IF NOT v_user_exists THEN
        INSERT INTO tbl_users (
            tu_id,
            tu_email,
            tu_user_type,
            tu_is_verified,
            tu_email_verified,
            tu_mobile_verified,
            tu_is_active,
            tu_created_at,
            tu_updated_at
        ) VALUES (
            p_user_id,
            p_email,
            p_user_type,
            false,
            false,
            false,
            true,
            now(),
            now()
        );
        RAISE NOTICE 'User record inserted successfully';
    ELSE
        -- Update existing user
        UPDATE tbl_users SET
            tu_email = p_email,
            tu_user_type = p_user_type,
            tu_updated_at = now()
        WHERE tu_id = p_user_id;
        RAISE NOTICE 'User record updated successfully';
    END IF;

    -- Insert or update user profile
    IF NOT v_profile_exists THEN
        INSERT INTO tbl_user_profiles (
            tup_user_id,
            tup_first_name,
            tup_middle_name,
            tup_last_name,
            tup_username,
            tup_mobile,
            tup_gender,
            tup_created_at,
            tup_updated_at
        ) VALUES (
            p_user_id,
            p_first_name,
            COALESCE(p_middle_name, ''),
            p_last_name,
            p_username,
            COALESCE(p_mobile, ''),
            null,
            now(),
            now()
        );
        RAISE NOTICE 'User profile inserted successfully';
    ELSE
        -- Update existing profile
        UPDATE tbl_user_profiles SET
            tup_first_name = p_first_name,
            tup_middle_name = COALESCE(p_middle_name, ''),
            tup_last_name = p_last_name,
            tup_username = p_username,
            tup_mobile = COALESCE(p_mobile, ''),
            tup_updated_at = now()
        WHERE tup_user_id = p_user_id;
        RAISE NOTICE 'User profile updated successfully';
    END IF;

    -- Get the sponsorship number (generated by trigger)
    SELECT tup_sponsorship_number INTO v_sponsorship_number
    FROM tbl_user_profiles 
    WHERE tup_user_id = p_user_id;

    RAISE NOTICE 'Sponsorship number: %', v_sponsorship_number;

    -- Create tutor profile if user type is tutor
    IF p_user_type = 'tutor' THEN
        INSERT INTO tbl_tutors (
            tt_user_id,
            tt_bio,
            tt_specializations,
            tt_experience_years,
            tt_education,
            tt_hourly_rate,
            tt_rating,
            tt_total_reviews,
            tt_total_students,
            tt_is_verified,
            tt_is_active,
            tt_created_at,
            tt_updated_at
        ) VALUES (
            p_user_id,
            '',
            '{}',
            0,
            '',
            25.00,
            0.00,
            0,
            0,
            false,
            true,
            now(),
            now()
        )
        ON CONFLICT (tt_user_id) DO UPDATE SET
            tt_updated_at = now();
        
        RAISE NOTICE 'Tutor profile created/updated successfully';
    END IF;

    -- Log registration activity (with error handling)
    BEGIN
        INSERT INTO tbl_user_activity_logs (
            tual_user_id,
            tual_activity_type,
            tual_ip_address,
            tual_user_agent,
            tual_login_time,
            tual_metadata,
            tual_created_at
        ) VALUES (
            p_user_id,
            'registration',
            'unknown',
            'registration_function',
            now(),
            json_build_object('registration_method', 'web_form'),
            now()
        );
        RAISE NOTICE 'Activity log created successfully';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Failed to log activity: %', SQLERRM;
        -- Don't fail the entire registration if activity logging fails
    END;

    -- Build success response
    v_result := json_build_object(
        'success', true,
        'message', 'User registered successfully',
        'user_id', p_user_id,
        'sponsorship_number', v_sponsorship_number,
        'user_type', p_user_type,
        'email', p_email,
        'username', p_username
    );

    RAISE NOTICE 'Registration completed successfully: %', v_result;
    RETURN v_result;

EXCEPTION WHEN unique_violation THEN
    RAISE NOTICE 'Unique violation error: %', SQLERRM;
    
    -- Check which constraint was violated
    IF SQLERRM LIKE '%tu_email_key%' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Email already exists',
            'details', 'An account with this email address already exists'
        );
    ELSIF SQLERRM LIKE '%tup_username_key%' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Username already exists',
            'details', 'This username is already taken'
        );
    ELSIF SQLERRM LIKE '%tup_sponsorship_number_key%' THEN
        RETURN json_build_object(
            'success', false,
            'error', 'Sponsorship number conflict',
            'details', 'Please try again'
        );
    ELSE
        RETURN json_build_object(
            'success', false,
            'error', 'Registration failed',
            'details', 'A user with this information already exists'
        );
    END IF;

WHEN foreign_key_violation THEN
    RAISE NOTICE 'Foreign key violation: %', SQLERRM;
    RETURN json_build_object(
        'success', false,
        'error', 'Database constraint violation',
        'details', 'Invalid reference data provided'
    );

WHEN OTHERS THEN
    RAISE NOTICE 'Unexpected error in register_user: %', SQLERRM;
    RETURN json_build_object(
        'success', false,
        'error', 'Registration failed',
        'details', SQLERRM
    );
END;
$$;

-- Grant execute permissions
GRANT EXECUTE ON FUNCTION register_user(uuid, text, text, text, text, text, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION register_user(uuid, text, text, text, text, text, text, text) TO anon;

-- Also create a simpler version without middle name for backward compatibility
CREATE OR REPLACE FUNCTION register_user(
    p_user_id uuid,
    p_email text,
    p_first_name text,
    p_last_name text,
    p_username text,
    p_mobile text DEFAULT '',
    p_user_type text DEFAULT 'learner'
)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Call the main function with empty middle name
    RETURN register_user(
        p_user_id,
        p_email,
        p_first_name,
        '', -- empty middle name
        p_last_name,
        p_username,
        p_mobile,
        p_user_type
    );
END;
$$;

-- Grant execute permissions for the simpler version
GRANT EXECUTE ON FUNCTION register_user(uuid, text, text, text, text, text, text) TO authenticated;
GRANT EXECUTE ON FUNCTION register_user(uuid, text, text, text, text, text, text) TO anon;